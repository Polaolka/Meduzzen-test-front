{"version":3,"file":"static/js/449.07d2c822.chunk.js","mappings":"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","sources":["components/Styled/HomePage.styled.tsx","components/Chat/Chat.styled.tsx","components/MessageCard/MessageCard.styled.tsx","components/MessageCard/MessageCard.tsx","components/Chat/Chat.tsx","pages/ChatPage.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const HomePageStyled = styled.div`\n  margin-top: 112px;\n  flex-direction: column;\n  display: flex;\n  gap: 24px;\n  padding-left: 20px;\n  padding-right: 20px;\n\n`;\n","import styled from \"@emotion/styled\";\n\n\nexport const UsersStyled = styled.div`\n  margin-top: 24px;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;","import styled from \"@emotion/styled\";\nimport { colors } from \"../../constants/index\";\nimport { HiOutlineHeart } from \"react-icons/hi\";\n\nimport { mediaSizes } from \"../../constants/index\";\nimport { transition } from \"../../helpers/mixins\";\n\nexport const MessageCardStyled = styled.div`\n  position: relative;\n  width: fit-content;\n  padding: 12px;\n\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  align-items: start;\n\n  justify-content: space-between;\n\n  border-radius: 12px;\n  border: 1px solid ${colors.colorLightBorder};\n  background: ${colors.colorWhite};\n\n  @media screen and (min-width: ${mediaSizes.tablet}) {\n    justify-content: space-between;\n    padding: 12px;\n    gap: 12px;\n  }\n\n  @media screen and (min-width: ${mediaSizes.desktop}) {\n    justify-content: space-between;\n    padding: 16px;\n    gap: 16px;\n  }\n`;\n\nexport const MessageImgsWrapper = styled.div`\n  width: 300px;\n  gap: 10px;\n  display: flex;\n  align-items: start;\n  justify-content: start;\n`;\n\nexport const MessageImgThumb = styled.div`\n  width: 92px;\n  height: 92px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n\n  border: 3px solid #fbe9ba;\n  background: #fff;\n`;\n\nexport const MessageImg = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const InfoMessageWrapper = styled.div`\nflex-wrap: wrap;\n  display: flex;\n  gap: 8px;\n`;\n\nexport const InfoMessageList = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const HeartLineStyled = styled(HiOutlineHeart)`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n\n  transform: scale(1);\n  cursor: pointer;\n  transition: transform 300ms cubic-bezier(0.39, 0.575, 0.565, 1);\n  ${transition(\"opacity\")};\n  &:hover {\n    transform: scale(1.02);\n    opacity: 0.8;\n  }\n`;\n\nexport const MessageContentBox = styled.div`\n  width: 300px;\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const MessageSenderName = styled.p`\n  color: ${colors.colorLigthText};\n  margin: 0;\n`;\n\nexport const ButtonBox = styled.div`\n  /* margin-left: auto; */\n  display: flex;\n  justify-content: start;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const MessagesContent = styled.p`\n  color: ${colors.colorBlack};\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1;\n`;\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IMessage } from \"../../redux/chat/chatSlice\";\n\nimport { ThunkDispatch, UnknownAction } from \"@reduxjs/toolkit\";\nimport {\n  MessageCardStyled,\n  MessageImg,\n  InfoMessageWrapper,\n  MessagesContent,\n  MessageContentBox,\n  MessageImgsWrapper,\n  MessageImgThumb,\n  ButtonBox,\n  MessageSenderName,\n} from \"./MessageCard.styled\";\nimport { Button } from \"../Styled/index\";\nimport RootState from \"../../redux/RootState\";\nimport { Loader } from \"../Loader/Loader\";\nimport { Caption } from \"../Form/Form.styled\";\nimport { deleteMessage, editMessage } from \"../../redux/chat/chatOperations\";\n\nconst MessageCard: React.FC<{ Message: IMessage }> = ({ Message }) => {\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, UnknownAction>>();\n  const { messageId, content, imgs, senderName } = Message;\n  const chatId = useSelector((state: RootState) => state.chat.chat?.chatId);\n  const isLoading = useSelector((state: RootState) => state.chat.isLoading);\n  const userId = useSelector((state: RootState) => state.auth.id);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedContent, setEditedContent] = useState(content);\n  const editMessageHandle = () => {\n    setIsEditing(true);\n  };\n  const saveEditHandle = async () => {\n    if (messageId && chatId && userId) {\n      const editedData = {\n        messageId,\n        chatId,\n        userId,\n        content: editedContent,\n      };\n      await dispatch(editMessage(editedData));\n    }\n    setIsEditing(false);\n  };\n  const deleteMessageHandle = async () => {\n    if (messageId && chatId && userId) {\n      const data = {\n        messageId,\n        chatId,\n        userId,\n      };\n      await dispatch(deleteMessage(data));\n    }\n  };\n\n  return (\n    <MessageCardStyled>\n      <InfoMessageWrapper>\n      <MessageContentBox>\n          {isEditing ? (\n            <textarea\n              value={editedContent}\n              onChange={(e) => setEditedContent(e.target.value)}\n            />\n          ) : (\n            <MessagesContent>{content}</MessagesContent>\n          )}\n          <MessageSenderName>Author: {senderName}</MessageSenderName>\n        </MessageContentBox>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <MessageImgsWrapper>\n            {imgs?.length > 0 ? (\n              imgs?.map((el) => (\n                <MessageImgThumb key={el}>\n                  <MessageImg alt=\"Message Img\" src={el} />\n                </MessageImgThumb>\n              ))\n            ) : (\n              <Caption className=\"sendMessage\">no images</Caption>\n            )}\n          </MessageImgsWrapper>\n        )}\n        <ButtonBox>\n          {isEditing ? (\n            <Button onClick={saveEditHandle} className=\"saveBtn\">\n              Save\n            </Button>\n          ) : (\n            <Button onClick={editMessageHandle} className=\"editBtn\">\n              Edit\n            </Button>\n          )}\n          <Button onClick={deleteMessageHandle} className=\"deleteBtn\">\n            Delete\n          </Button>\n        </ButtonBox>\n      </InfoMessageWrapper>\n    </MessageCardStyled>\n  );\n};\n\nexport default MessageCard;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik, Form, Field, ErrorMessage, FormikHelpers, useFormikContext  } from \"formik\";\nimport * as yup from \"yup\";\nimport Container from \"../Container/Container\";\nimport { ButtonContainer, Caption } from \"../Form/Form.styled\";\nimport { Loader } from \"../Loader/Loader\";\nimport { Button } from \"../Styled\";\nimport RootState from \"../../redux/RootState\";\nimport { ThunkDispatch, UnknownAction } from \"@reduxjs/toolkit\";\nimport { UsersStyled } from \"./Chat.styled\";\nimport MessageCard from \"../MessageCard/MessageCard\";\nimport { FormFields, LoginFormStyled } from \"../LoginForm/LoginForm.styled\";\nimport { InputWraper } from \"../Form/Input.styled\";\nimport { addMessage } from \"../../redux/chat/chatOperations\";\n\ninterface FormData {\n  content: string;\n  sender: string;\n  imgs: File[];\n  chatId: string;\n  senderName: string;\n}\nconst schema = yup.object().shape({\n  content: yup.string().min(6).max(200).required(\"Message content is required\"),\n  imgs: yup.array()\n});\n\nfunction MyForm() {\n  const formik = useFormikContext();\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.currentTarget.files;\n\n    if (files) {\n      if (files.length <= 3) {\n        formik.setFieldValue(\"imgs\", Array.from(files));\n        setErrorMessage(null);\n      } else {\n        const message = \"Можна вибрати не більше трьох файлів.\";\n        console.error(message);\n        setErrorMessage(message);\n        formik.setFieldValue(\"imgs\", Array.from(files).slice(0, 3));\n      }\n    } else if (event.currentTarget.value) {\n      formik.setFieldValue(\"imgs\", [event.currentTarget.value]);\n      setErrorMessage(null);\n    } else {\n      formik.setFieldValue(\"imgs\", []);\n      setErrorMessage(null);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        name=\"imgs\"\n        accept=\".jpg, .jpeg, .png\"\n        multiple\n        onChange={handleFileChange}\n      />\n      {errorMessage && <div style={{ color: \"red\" }}>{errorMessage}</div>}\n    </>\n  );\n}\n\nfunction Chat() {\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, UnknownAction>>();\n  const userId = useSelector((state: RootState) => state.auth.id);\n  const senderName = useSelector((state: RootState) => state.auth.name);\n  const chat = useSelector((state: RootState) => state.chat.chat);\n  const initialValues: FormData = { content: \"\", imgs: [], sender: \"\", chatId: \"\", senderName: \"\" };\n  const isLoading = useSelector((state: RootState) => state.chat.isLoading);\n\n  const addMessageHandle = async (\n    values: FormData,\n    { resetForm }: FormikHelpers<FormData>\n  ) => {\n    if (userId && chat?.chatId && senderName) {\n      const formData = new FormData();\n      const files = values.imgs;\n      if (files.length === 1) {\n        formData.append(\"imgs\", files[0]);\n      } else {\n        for (let i = 0; i < files.length; i++) {\n          formData.append(\"imgs\", files[i]);\n        }\n      }\n      formData.append(\"senderName\", senderName);\n      formData.append(\"content\", values.content);\n      formData.append(\"chatId\", chat?.chatId);\n      formData.append(\"sender\", userId);\n\n      await dispatch(addMessage(formData));\n    }\n    resetForm();\n  };\n\n  return (\n    <Container>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <UsersStyled>\n          {chat && chat.messages && chat.messages.length > 0 ? (\n            chat.messages?.map((el) => (\n              <MessageCard key={el.messageId} Message={el} />\n            ))\n          ) : (\n            <Caption className=\"sendMessage\">Unfortunately, no messages yet.</Caption>\n          )}\n        </UsersStyled>\n      )}\n\n      <LoginFormStyled>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          onSubmit={addMessageHandle}\n        >\n          <Form autoComplete=\"off\">\n            <Caption className=\"sendMessage\">Add message</Caption>\n            <FormFields>\n              <InputWraper>\n                <Field type=\"text\" name=\"content\" placeholder=\" \" />\n                <label htmlFor=\"content\">Message *</label>\n                <ErrorMessage\n                  className=\"error\"\n                  component=\"div\"\n                  name=\"content\"\n                />\n              </InputWraper>\n              <MyForm />\n              {/* <label htmlFor=\"imgs\">Message *</label> */}\n              <ErrorMessage name=\"imgs\" component=\"div\" />\n            </FormFields>\n\n            <ButtonContainer>\n              <Button className=\"regLogbutton\" type=\"submit\">\n                send message\n              </Button>\n            </ButtonContainer>\n          </Form>\n        </Formik>\n      </LoginFormStyled>\n    </Container>\n  );\n}\n\nexport default Chat;\n","import React, { useEffect } from \"react\";\nimport { HomePageStyled } from \"../components/Styled/HomePage.styled\";\nimport { useParams } from \"react-router-dom\";\nimport { ThunkDispatch, UnknownAction } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { openChat } from \"../redux/chat/chatOperations\"; \nimport Chat from \"../components/Chat/Chat\";\nimport RootState from \"../redux/RootState\";\n\nconst ChatPage = () => {\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, UnknownAction>>();\n  const { chatId } = useParams();\n\n  const isAuth = useSelector((state: RootState) => state.auth.isAuth);\n    \n  useEffect(() => {\n    if (chatId) {\n      dispatch(openChat({ chatId }));\n    }\n  }, [dispatch, chatId]);\n  return (\n    <HomePageStyled>\n      {isAuth && <Chat/>}\n       {/* <Chat/>Додати перевірку на юзера!!!!!!!!!!!!!!!!!!!!!!!!!! */}\n    </HomePageStyled>\n  );\n};\n\nexport default ChatPage;"],"names":["HomePageStyled","styled","div","_templateObject","_taggedTemplateLiteral","UsersStyled","MessageCardStyled","colors","colorLightBorder","colorWhite","mediaSizes","tablet","desktop","MessageImgsWrapper","_templateObject2","MessageImgThumb","_templateObject3","MessageImg","img","_templateObject4","InfoMessageWrapper","_templateObject5","MessageContentBox","_templateObject6","HiOutlineHeart","_templateObject7","transition","_templateObject8","MessageSenderName","p","_templateObject9","colorLigthText","ButtonBox","_templateObject10","MessagesContent","_templateObject11","colorBlack","_ref","Message","dispatch","useDispatch","messageId","content","imgs","senderName","chatId","useSelector","state","_state$chat$chat","chat","isLoading","userId","auth","id","isEditing","setIsEditing","useState","editedContent","setEditedContent","_jsx","children","_jsxs","value","onChange","e","target","Loader","length","map","el","alt","src","Caption","className","Button","onClick","async","editedData","editMessage","editMessageHandle","data","deleteMessage","schema","yup","shape","min","max","required","MyForm","formik","useFormikContext","errorMessage","setErrorMessage","_Fragment","type","name","accept","multiple","event","files","currentTarget","setFieldValue","Array","from","message","console","error","slice","style","color","_chat$messages","Container","messages","MessageCard","LoginFormStyled","Formik","initialValues","sender","validationSchema","onSubmit","values","resetForm","formData","FormData","append","i","addMessage","Form","autoComplete","FormFields","InputWraper","Field","placeholder","htmlFor","ErrorMessage","component","ButtonContainer","ChatPage","useParams","isAuth","useEffect","openChat","Chat"],"sourceRoot":""}